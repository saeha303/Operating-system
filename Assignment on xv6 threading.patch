diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..d5f9712
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "defs.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..a822569 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..3d6da71 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -3,6 +3,7 @@ struct context;
 struct file;
 struct inode;
 struct pipe;
+struct mem;
 struct proc;
 struct spinlock;
 struct sleeplock;
@@ -88,7 +89,7 @@ int             fork(void);
 int             growproc(int);
 void            proc_mapstacks(pagetable_t);
 pagetable_t     proc_pagetable(struct proc *);
-void            proc_freepagetable(pagetable_t, uint64);
+void            proc_freepagetable(pagetable_t, uint64, int);
 int             kill(int);
 int             killed(struct proc*);
 void            setkilled(struct proc*);
@@ -96,6 +97,7 @@ struct cpu*     mycpu(void);
 struct cpu*     getmycpu(void);
 struct proc*    myproc();
 void            procinit(void);
+void            meminit(void);
 void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
 void            sleep(void*, struct spinlock*);
@@ -106,6 +108,11 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(void(*fcn)(void*), void* arg, void* stack);
+int             thread_join(int thread_id);
+void            thread_exit(void);
+void            new_sleep(uint64,int);
+void            new_wakeup(uint64,int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,12 +172,16 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
-void            uvmfree(pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64);
+int             uvmrangemirror(pagetable_t, pagetable_t, uint64, uint64);
+void            uvmfree(pagetable_t, uint64, int);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
 pte_t *         walk(pagetable_t, uint64, int);
 uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
+// int             mycopyout(pagetable_t, uint64);
+uint64          virtualToPhysical(pagetable_t,uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
 
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..c113bc1 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -126,13 +126,13 @@ exec(char *path, char **argv)
   p->sz = sz;
   p->trapframe->epc = elf.entry;  // initial program counter = main
   p->trapframe->sp = sp; // initial stack pointer
-  proc_freepagetable(oldpagetable, oldsz);
+  proc_freepagetable(oldpagetable, oldsz, 1);//1 or 0
 
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
   if(pagetable)
-    proc_freepagetable(pagetable, sz);
+    proc_freepagetable(pagetable, sz, 1);//1 or 0
   if(ip){
     iunlockput(ip);
     end_op();
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..daffbd7 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -20,6 +20,7 @@ main()
     kvminit();       // create kernel page table
     kvminithart();   // turn on paging
     procinit();      // process table
+    meminit();
     trapinit();      // trap vectors
     trapinithart();  // install kernel trap vector
     plicinit();      // set up interrupt controller
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..7afd7a2 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -9,10 +9,12 @@
 struct cpu cpus[NCPU];
 
 struct proc proc[NPROC];
-
+struct mem mem[NPROC];
 struct proc *initproc;
 
 int nextpid = 1;
+int nextmemid = 1;
+struct spinlock memid_lock;
 struct spinlock pid_lock;
 
 extern void forkret(void);
@@ -50,14 +52,22 @@ procinit(void)
   struct proc *p;
   
   initlock(&pid_lock, "nextpid");
+  initlock(&memid_lock,"nextmemid");
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      // initlock(&p->memlock, "proc mem");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
 }
-
+void meminit(){
+  struct mem *m;
+  for(m = mem; m < &mem[NPROC]; m++) {
+      initlock(&m->memlock, "proc memlock");
+      m->ref_count=0;
+  }
+}
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
@@ -102,6 +112,18 @@ allocpid()
   return pid;
 }
 
+int
+allocmemid()
+{
+  int mem_id;
+
+  acquire(&memid_lock);
+  mem_id = nextmemid;
+  nextmemid = nextmemid + 1;
+  release(&memid_lock);
+
+  return mem_id;
+}
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -123,8 +145,21 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  // printf("allocproc %d\n",p->pid);
   p->state = USED;
-
+  p->mem_id=allocmemid();
+  struct mem *m;
+  for(m = mem; m < &mem[NPROC]; m++) {
+      acquire(&m->memlock);
+      if(m->ref_count==0){//>>>>unused???
+        p->mem=m;
+        m->ref_count++;
+        release(&m->memlock);
+        break;
+      }
+      release(&m->memlock);
+  }
+  p->is_thread=0;
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -158,11 +193,22 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+  acquire(&p->mem->memlock);
   if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  {
+    if(p->is_thread)
+      proc_freepagetable(p->pagetable, p->sz,0);
+    else
+      proc_freepagetable(p->pagetable, p->sz,1);
+  }
+  release(&p->mem->memlock);
+  p->mem->ref_count--;
+  p->mem=0;
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
+  p->mem_id=0;
+  p->is_thread=0;
   p->parent = 0;
   p->name[0] = 0;
   p->chan = 0;
@@ -189,7 +235,7 @@ proc_pagetable(struct proc *p)
   // to/from user space, so not PTE_U.
   if(mappages(pagetable, TRAMPOLINE, PGSIZE,
               (uint64)trampoline, PTE_R | PTE_X) < 0){
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -198,7 +244,7 @@ proc_pagetable(struct proc *p)
   if(mappages(pagetable, TRAPFRAME, PGSIZE,
               (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
-    uvmfree(pagetable, 0);
+    uvmfree(pagetable, 0, 1);
     return 0;
   }
 
@@ -208,11 +254,11 @@ proc_pagetable(struct proc *p)
 // Free a process's page table, and free the
 // physical memory it refers to.
 void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+proc_freepagetable(pagetable_t pagetable, uint64 sz, int do_free)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
-  uvmfree(pagetable, sz);
+  uvmfree(pagetable, sz, do_free);
 }
 
 // a user program that calls exec("/init")
@@ -259,18 +305,51 @@ userinit(void)
 int
 growproc(int n)
 {
+  // printf("in growproc\n");
   uint64 sz;
   struct proc *p = myproc();
+  struct proc *pp;
+  acquire(&p->mem->memlock);
+  // for(pp = proc; pp < &proc[NPROC]; pp++){
+  //   if(pp!=p && pp->mem_id==p->mem_id){
+  //     // acquire(&pp->memlock);
+  //   }
+
+  // }
 
   sz = p->sz;
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      release(&p->mem->memlock);
       return -1;
     }
   } else if(n < 0){
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    if(pp!=p && pp->mem_id==p->mem_id){
+      acquire(&pp->lock);
+      if(n>=0){
+        if(uvmrangemirror(p->pagetable,pp->pagetable,pp->sz,p->sz)<0){
+          release(&pp->lock);
+          release(&pp->mem->memlock);
+        }
+      }else{
+        uvmunmap(pp->pagetable, PGROUNDUP(p->sz), (PGROUNDUP(pp->sz) - PGROUNDUP(p->sz)) / PGSIZE, 1);
+      }
+      pp->sz=p->sz;
+      release(&pp->lock);
+    }
+
+  }
+  // for(pp = proc; pp < &proc[NPROC]; pp++){
+  //   if(pp!=p && pp->mem_id==p->mem_id){
+  //     // release(&pp->memlock);
+  //   }
+
+  // }
+  release(&p->mem->memlock);
   return 0;
 }
 
@@ -402,24 +481,32 @@ wait(uint64 addr)
     for(pp = proc; pp < &proc[NPROC]; pp++){
       if(pp->parent == p){
         // make sure the child isn't still in exit() or swtch().
+        
         acquire(&pp->lock);
-
+        acquire(&pp->mem->memlock);
         havekids = 1;
         if(pp->state == ZOMBIE){
           // Found one.
           pid = pp->pid;
           if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
                                   sizeof(pp->xstate)) < 0) {
+            release(&pp->mem->memlock);
             release(&pp->lock);
+            
             release(&wait_lock);
             return -1;
           }
+          release(&pp->mem->memlock);
           freeproc(pp);
+          
           release(&pp->lock);
+          
           release(&wait_lock);
           return pid;
         }
+        release(&pp->mem->memlock);
         release(&pp->lock);
+        
       }
     }
 
@@ -651,7 +738,203 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
     return 0;
   }
 }
+int thread_create(void(*fcn)(void*), void *arg, void *stack)
+{
+  int i, pid;
+  uint64 sp;
+  struct proc *np;
+  struct proc *p = myproc();
+  // acquire(&p->mem->memlock);
+  // printf("in thread create\n");
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    // release(&p->mem->memlock);
+    return -1;
+  }
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    // release(&p->mem->memlock);
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->mem->ref_count--;
+  *(np->trapframe) = *(p->trapframe);
+  np->sz=p->sz;
+  //stack allocation
+
+  sp=(uint64)stack + PGSIZE;
+  sp -= sp % 16;
+
+  np->trapframe->sp =sp;
+
+  np->trapframe->epc=(uint64)fcn;
+
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 = (uint64)arg;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+  np->is_thread=1;
+  np->mem_id=p->mem_id;
+  np->mem=p->mem;
+  // release(&p->mem->memlock);
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+  return pid;
+}
+int
+thread_join(int thread_id)
+{
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          if(pid==thread_id){
+            freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+          }
+          // if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+          //                         sizeof(pp->xstate)) < 0) {
+          //   release(&pp->lock);
+          //   release(&wait_lock);
+          //   return -1;
+          // }
+
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+void thread_exit(void)
+{
+  struct proc *p = myproc();
 
+  if(p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+
+  acquire(&p->lock);
+  // printf("exit %d\n",p->pid);
+  // p->xstate = 1;
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+  // return 1;
+}
+void
+new_sleep(uint64 signal,int val)
+{
+ struct proc *p = myproc();
+  int* addr;
+  acquire(&p->mem->memlock);
+  addr=(int*)virtualToPhysical(p->pagetable,signal);
+  if(__sync_bool_compare_and_swap(addr,val,val)){//address has current, then change with new value
+    sleep(addr,&p->mem->memlock);
+    release(&p->mem->memlock);
+    return;
+  }
+  release(&p->mem->memlock);
+}
+void
+new_wakeup(uint64 signal,int count)
+{
+  struct proc *p=myproc();
+  struct proc *pp;
+  int* addr;
+  // int flag=0;
+  addr=(int*)virtualToPhysical(p->pagetable,signal);
+  for(pp = proc; pp < &proc[NPROC]; pp++) {
+    // printf("pp\n");
+    if(pp != p && pp->mem!=0){
+      // printf("pp != myproc()\n");
+      acquire(&pp->lock);
+      // printf("lk\n");
+//       if(pp->mem==0){
+// printf("memlk\n");
+//       }
+      acquire(&pp->mem->memlock);
+      
+      if(pp->state == SLEEPING && pp->is_thread && pp->mem_id == p->mem_id && pp->chan==(void*)addr) {// 
+      // printf("chan\n");
+        pp->state = RUNNABLE;
+        if(count==1){
+          release(&pp->mem->memlock);
+          release(&pp->lock);
+          return;
+        }
+      }
+      release(&pp->mem->memlock);
+      release(&pp->lock);
+    }
+    // count--;
+  }
+}
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..4a83ffa 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -80,11 +80,15 @@ struct trapframe {
 };
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
-
+struct mem {
+  struct spinlock memlock; // spinlock protecting this sleep lock
+  int ref_count;
+  // int memid;
+};
 // Per-process state
 struct proc {
   struct spinlock lock;
-
+  struct mem* mem;
   // p->lock must be held when using these:
   enum procstate state;        // Process state
   void *chan;                  // If non-zero, sleeping on chan
@@ -103,5 +107,7 @@ struct proc {
   struct context context;      // swtch() here to run process
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
+  int is_thread;
+  int mem_id;
   char name[16];               // Process name (debugging)
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..37f46ca 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,11 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_new_sleep(void);
+extern uint64 sys_new_wakeup(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +131,11 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join]   sys_thread_join,
+[SYS_thread_exit]   sys_thread_exit,
+[SYS_new_sleep]     sys_new_sleep,
+[SYS_new_wakeup]   sys_new_wakeup,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..965d5fd 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_new_sleep 25
+#define SYS_new_wakeup 26
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..cce3f67 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -12,7 +12,7 @@ sys_exit(void)
   int n;
   argint(0, &n);
   exit(n);
-  return 0;  // not reached
+  return 0; // not reached
 }
 
 uint64
@@ -43,7 +43,7 @@ sys_sbrk(void)
 
   argint(0, &n);
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if (growproc(n) < 0)
     return -1;
   return addr;
 }
@@ -89,3 +89,48 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 func, arg, stack;
+  argaddr(0, &func);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return thread_create((void *)func, (void *)arg, (void *)stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int thread_id;
+  argint(0, &thread_id);
+  return thread_join(thread_id);
+}
+
+uint64
+sys_thread_exit(void)
+{
+  thread_exit();
+  return 0;
+}
+uint64
+sys_new_sleep(void)
+{
+  uint64 signal;
+  int val;
+  argaddr(0,&signal);
+  argint(1,&val);
+  new_sleep(signal,val);
+  return 0;
+}
+uint64
+sys_new_wakeup(void)
+{
+  uint64 signal;
+  int count;
+  argaddr(0,&signal);
+  argint(1,&count);
+  new_wakeup(signal,count);
+  return 0;
+}
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..d03b999 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -289,10 +289,10 @@ freewalk(pagetable_t pagetable)
 // Free user memory pages,
 // then free page-table pages.
 void
-uvmfree(pagetable_t pagetable, uint64 sz)
+uvmfree(pagetable_t pagetable, uint64 sz,int do_free)
 {
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, do_free);
   freewalk(pagetable);
 }
 
@@ -331,6 +331,58 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   uvmunmap(new, 0, i / PGSIZE, 1);
   return -1;
 }
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmmirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmmirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+
+    if(mappages(new, i, PGSIZE,pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+int
+uvmrangemirror(pagetable_t old, pagetable_t new, uint64 oldsz, uint64 newsz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+  oldsz = PGROUNDUP(oldsz);
+  for(i = oldsz; i < newsz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmrangemirror: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmrangemirror: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+
+    if(mappages(new, i, PGSIZE,pa, flags) != 0){
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
 
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
@@ -369,7 +421,22 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   }
   return 0;
 }
+int
+mycopyout(pagetable_t pagetable, uint64 dstva)
+{
+  uint64 va0, pa0;
 
+    va0 = PGROUNDDOWN(dstva);
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+    // n = PGSIZE - (dstva - va0);
+    // if(n > len)
+    //   n = len;
+    // memmove((void *)(pa0 + (dstva - va0)), src, n);
+    // dstva = va0 + PGSIZE;
+  return 0;
+}
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
@@ -394,7 +461,13 @@ copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
   }
   return 0;
 }
-
+uint64 virtualToPhysical(pagetable_t pagetable,uint64 va)
+{
+  uint64 va0, pa0;
+  va0 = PGROUNDDOWN(va);
+  pa0 = walkaddr(pagetable, va0);
+  return pa0 + (va - va0);
+}
 // Copy a null-terminated string from user to kernel.
 // Copy bytes to dst from virtual address srcva in a given page table,
 // until a '\0', or max.
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..04c7bd2
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,139 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/thread_lock.h"
+#include "user/user.h"
+
+struct queue
+{
+    int arr[16];
+    int front;
+    int rear;
+    int size;
+};
+void init(struct queue *q)
+{
+    q->front = 0;
+    q->rear = 0;
+    q->size = 0;
+}
+void push(struct queue *q, int x)
+{
+    // why don't we check if rear==front
+    q->arr[q->rear] = x;
+    q->rear = (q->rear + 1) % 16;
+    q->size++;
+}
+int front(struct queue *q)
+{
+    if (q->size == 0)
+        return -1;
+    return q->arr[q->front];
+}
+void pop(struct queue *q)
+{
+    // rear==front also means queue is full or empty
+    q->front = (q->front + 1) % 16;
+    q->size--;
+}
+struct queue q;
+// a mutex object lock 
+struct thread_mutex mx;
+// a semaphore object empty
+sem_t empty;
+// a semaphore object full
+sem_t full;
+struct thread_mutex printmx;
+void init_semaphore()
+{
+	// initialize mutex lock
+	thread_mutex_init(&mx);
+	// initialize semaphore empty with 5
+	sem_init(&empty,5);
+	// initialize semaphore full with 0
+	sem_init(&full,0);
+	thread_mutex_init(&printmx);
+}
+
+void ProducerFunc(void * arg)
+{	
+	thread_mutex_lock(&printmx);
+	printf("%s\n",(char*)arg);
+	thread_mutex_unlock(&printmx);
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+		sem_wait(&empty);
+		// wait for mutex lock
+		thread_mutex_lock(&mx);
+		sleep(1);	
+		push(&q,i);
+		thread_mutex_lock(&printmx);
+		printf("producer produced item %d\n",i);
+		thread_mutex_unlock(&printmx);
+		// unlock mutex lock	
+		thread_mutex_unlock(&mx);
+		// post semaphore full
+		sem_post(&full);
+	}
+	thread_exit();
+	return;
+}
+
+void ConsumerFunc(void * arg)
+{
+	thread_mutex_lock(&printmx);
+	printf("%s\n",(char*)arg);
+	thread_mutex_unlock(&printmx);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// wait for semphore full
+		sem_wait(&full);
+
+		// wait for mutex lock
+ 		thread_mutex_lock(&mx);
+			
+		sleep(1);
+		int item = front(&q);
+		pop(&q);
+		thread_mutex_lock(&printmx);
+		printf("consumer consumed item %d\n",item);	
+		thread_mutex_unlock(&printmx);
+
+		// unlock mutex lock
+		thread_mutex_unlock(&mx);
+		// post semaphore empty	
+		sem_post(&empty);
+	}
+	thread_exit();
+	return;
+}
+
+int main(void)
+{	
+	
+	init_semaphore();
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1, thread2, r1, r2;
+
+  	s1 = malloc(4096);
+  	s2 = malloc(4096);
+
+  	thread1 = thread_create(ProducerFunc, (void*)message1, s1);
+	// printf("thread1 %d\n",thread1);
+  	thread2 = thread_create(ConsumerFunc, (void*)message2, s2); 
+	// printf("thread2 %d\n",thread2);
+
+  	r1 = thread_join(thread1);
+  	r2 = thread_join(thread2);	
+	
+	printf("Threads finished: (%d):%d, (%d):%d\n",
+      thread1, r1, thread2, r2);
+	exit(0);
+}
diff --git a/user/thread_lock.h b/user/thread_lock.h
new file mode 100644
index 0000000..78abc0e
--- /dev/null
+++ b/user/thread_lock.h
@@ -0,0 +1,156 @@
+#include "kernel/types.h"
+#include "user/user.h"
+struct thread_spinlock {
+  uint8 locked;       // Is the lock held?
+  int pid;
+};
+void thread_spin_init(struct thread_spinlock *lk)
+{
+  lk->locked = 0;
+  lk->pid=0;
+}
+void
+thread_spin_lock(struct thread_spinlock *lk)
+{
+  if(holding(lk))
+    printf("panic in thread_spinlock_lock\n");
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+  __sync_synchronize();
+  lk->pid = getpid();
+}
+void
+thread_spin_unlock(struct thread_spinlock *lk)
+{
+  if(!holding(lk))
+    printf("panic in thread_spinlock_unlock\n");
+  lk->pid=0;
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+
+}
+int
+holding(struct thread_spinlock *lk)
+{
+  int r;
+  r = (lk->locked && lk->pid == getpid());
+  return r;
+}
+struct thread_mutex
+{
+  uint8 locked;       // Is the lock held?
+};
+void thread_mutex_init(struct thread_mutex *m)
+{
+  m->locked = 0;
+}
+void thread_mutex_lock(struct thread_mutex *m)
+{
+  
+  while(__sync_lock_test_and_set(&m->locked, 1) != 0){//m->locked==1
+    sleep(1);
+  }
+  __sync_synchronize();
+  // m->locked=1;
+}
+void thread_mutex_unlock(struct thread_mutex *m)
+{
+  __sync_synchronize();
+  __sync_lock_release(&m->locked);
+  // m->locked=0;
+}
+
+struct condvar {
+    // struct queue q;
+    // struct thread_mutex mx;
+    int signal;//0-wait,1-signal others
+    // int nThreads;
+};
+void pthread_cond_init(struct condvar *cv)
+{
+    // thread_mutex_init(&cv->mx);
+    cv->signal=0;
+    // cv->nThreads=0;
+}
+void pthread_cond_wait(struct condvar *cv, struct thread_mutex *mx)
+{
+    // thread_mutex_lock(&cv->mx);                    /* protect the queue */
+    // push(&cv->q,pid); /* enqueue */
+    // thread_mutex_unlock(&cv->mx);             /* we're done with the list */
+
+    // /* The suspend and release_mutex() operation should be atomic */
+    // release_sleep(mx->locked);
+
+    // thread_mutex_lock(mx); /* Woke up -- our turn, get resource lock */
+
+    // return;
+    __sync_fetch_and_and(&cv->signal,0);
+    thread_mutex_unlock(mx);
+    while(__sync_bool_compare_and_swap(&cv->signal,0,0)!=0){
+      // printf("here \n");
+      new_sleep(&cv->signal,0);
+    }
+    thread_mutex_lock(mx);
+}
+void pthread_cond_signal (struct condvar *cv)
+  {
+
+    // thread_mutex_lock(&mx);  /* protect the queue */
+    // int tid=front(&cv->q);
+    // pop(&cv->q);
+    // thread_mutex_unlock(&cv->mx); 
+    __sync_fetch_and_or(&cv->signal,1);
+    // printf("cv signal %d\n",cv->signal);
+    new_wakeup(&cv->signal,1);
+
+    return;
+  }
+  void pthread_cond_broadcast (struct condvar *cv)
+  {
+
+    // thread_mutex_lock(&mx);  /* protect the queue */
+    // int tid=front(&cv->q);
+    // pop(&cv->q);
+    // thread_mutex_unlock(&cv->mx); 
+    __sync_fetch_and_or(&cv->signal,1);
+    // printf("cv signal %d\n",cv->signal);
+    new_wakeup(&cv->signal,64);
+
+    return;
+  }
+  typedef struct sem_t {
+    int count; 
+    struct thread_mutex m;
+    struct condvar cv;
+} sem_t;
+int sem_init(sem_t *s, int value) {
+    // if (pshared) { errno = ENOSYS /* 'Not implemented'*/; return -1; }
+
+    s->count = value;
+    thread_mutex_init(&s->m);
+    pthread_cond_init(&s->cv);
+    return 0;
+}
+void sem_post(sem_t *s) {
+    thread_mutex_lock(&s->m);
+    s->count++;
+    
+    pthread_cond_signal(&s->cv); /* See note */
+    // pthread_cond_broadcast(&s->cv);
+    
+    /* A woken thread must acquire the lock, so it will also have to wait until we call unlock */
+
+    thread_mutex_unlock(&s->m);
+    // printf("sem_post\n");
+}
+void sem_wait(sem_t *s) {
+    // printf("wait %d\n",s->count);
+    thread_mutex_lock(&s->m);
+    // printf("mutex lock in wait\n");
+    while (s->count == 0) {
+        // printf("loop\n");
+        pthread_cond_wait(&s->cv, &s->m); /*unlock mutex, wait, relock mutex */
+    }
+    s->count--;
+    thread_mutex_unlock(&s->m);
+}
\ No newline at end of file
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..f7f3d6d
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,94 @@
+// #include "kernel/types.h"
+#include "user/thread_lock.h"
+#include "kernel/stat.h"
+// #include "user/user.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+// struct thread_spinlock lock;
+struct thread_mutex mlock;
+struct thread_mutex printmx;
+// struct thread_spinlock printmx;
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i;
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;
+}
+
+void do_work(void *arg){
+    int i;
+    int old;
+  //   int* arr=malloc(10000*sizeof(int));
+  // for(int i=0;i<1000;i++){
+  //   arr[i]=0;
+  // }
+  // printf("arr %d\n",arr[0]);
+    
+    
+    // thread_spin_lock(&printmx);
+    struct balance *b = (struct balance*) arg;
+    thread_mutex_lock(&printmx);
+    printf( "Starting do_work: s:%s\n", b->name);
+    thread_mutex_unlock(&printmx);
+    // thread_spin_unlock(&printmx);
+    for (i = 0; i < b->amount; i++) {
+        // lock and mlock will be implemented by you.
+        //  thread_spin_lock(&lock);
+         thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+         thread_mutex_lock(&printmx);
+	 if(old != total_balance)  printf("we will miss an update by %s. old: %d total_balance: %d\n", b->name, old, total_balance);
+   thread_mutex_unlock(&printmx);
+         total_balance = old + 1;
+         
+        //  printf("updated balance by %s: old: %d, total:%d\n",b->name, old, total_balance);
+        
+         thread_mutex_unlock(&mlock);
+          // thread_spin_unlock(&lock);
+
+    }
+
+    printf( "Done s:%x\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[]) {
+
+  struct balance b1 = {"b1", 220};
+  struct balance b2 = {"b2", 80};
+
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+  thread_mutex_init(&printmx);
+    // thread_spin_init(&printmx);
+    // thread_spin_init(&lock);
+    thread_mutex_init(&mlock);
+  // int* arr=malloc(10000*sizeof(int));
+  // for(int i=0;i<1000;i++){
+  //   arr[i]=0;
+  // }
+  // printf("arr %d\n",arr[0]);
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2);
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..166c3e4 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,6 @@
 struct stat;
-
+struct condvar;
+struct thread_spinlock;
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,7 +23,12 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int thread_create(void(*fcn)(void*), void *arg, void *stack);
+int thread_join(int thread_id);
+void thread_exit(void);
+int new_sleep(int*,int);
+void new_wakeup(int*,int);
+int holding(struct thread_spinlock *);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..1e071ef 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,8 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("new_sleep");
+entry("new_wakeup");
\ No newline at end of file
